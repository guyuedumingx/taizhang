import pytest
from fastapi.testclient import TestClient
from sqlalchemy.orm import Session
import uuid

from app import crud, models, schemas
from app.core.config import settings
from app.main import app

client = TestClient(app)


# 创建工作流固定装置
@pytest.fixture(scope="function")
def workflow(db: Session, admin_token_headers: dict):
    """创建测试工作流固定装置"""
    random_suffix = uuid.uuid4().hex[:8]
    # 使用管理员创建工作流以避免权限问题
    workflow_data = {
        "name": f"测试工作流_{random_suffix}",
        "description": "用于测试的工作流",
        "nodes": []
    }
    
    response = client.post(
        f"{settings.API_V1_STR}/workflows/",
        headers=admin_token_headers,
        json=workflow_data,
    )
    
    if response.status_code != 200 and response.status_code != 201:
        pytest.skip(f"无法创建测试工作流：{response.content}")
    
    workflow_id = response.json()["id"]
    workflow = db.query(models.Workflow).filter(models.Workflow.id == workflow_id).first()
    
    yield workflow
    
    # 清理测试数据
    db.query(models.WorkflowNode).filter(models.WorkflowNode.workflow_id == workflow.id).delete()
    db.delete(workflow)
    db.commit()


def test_get_workflows(db: Session, admin_token_headers: dict, workflow: models.Workflow):
    """测试获取工作流列表"""
    response = client.get(
        f"{settings.API_V1_STR}/workflows/",
        headers=admin_token_headers,
    )
    
    assert response.status_code == 200
    data = response.json()
    # 修改断言以适配分页响应格式
    assert isinstance(data, dict)
    assert "items" in data
    assert "total" in data
    assert "page" in data
    assert "size" in data
    assert isinstance(data["items"], list)
    assert len(data) > 0
    
    # 测试搜索功能
    response = client.get(
        f"{settings.API_V1_STR}/workflows/?search={workflow.name}",
        headers=admin_token_headers,
    )
    
    assert response.status_code == 200
    data = response.json()
    assert len(data) >= 1
    assert any(w["name"] == workflow.name for w in data)


def test_create_workflow(db: Session, admin_token_headers: dict):
    """测试创建工作流"""
    random_suffix = uuid.uuid4().hex[:8]
    
    # 1. 先创建工作流
    workflow_data = {
        "name": f"API测试工作流_{random_suffix}",
        "description": "通过API创建的工作流"
    }
    
    response = client.post(
        f"{settings.API_V1_STR}/workflows/",
        headers=admin_token_headers,
        json=workflow_data,
    )
    
    print(f"Response status: {response.status_code}")
    print(f"Response content: {response.content}")
    
    assert response.status_code == 200 or response.status_code == 201
    workflow_resp = response.json()
    assert workflow_resp["name"] == workflow_data["name"]
    assert workflow_resp["description"] == workflow_data["description"]
    
    workflow_id = workflow_resp["id"]
    
    # 2. 添加节点
    node_data = {
        "name": "测试节点1",
        "description": "第一个节点",
        "node_type": "approval",
        "order_index": 1,
        "workflow_id": workflow_id
    }
    
    response = client.post(
        f"{settings.API_V1_STR}/workflows/{workflow_id}/nodes",
        headers=admin_token_headers,
        json=node_data,
    )
    
    # 清理测试数据
    workflow = db.query(models.Workflow).filter(models.Workflow.id == workflow_id).first()
    if workflow:
        # 先删除关联的节点
        db.query(models.WorkflowNode).filter(models.WorkflowNode.workflow_id == workflow.id).delete()
        db.delete(workflow)
        db.commit()


def test_get_workflow(db: Session, admin_token_headers: dict, workflow: models.Workflow):
    """测试获取单个工作流"""
    response = client.get(
        f"{settings.API_V1_STR}/workflows/{workflow.id}",
        headers=admin_token_headers,
    )
    
    assert response.status_code == 200
    data = response.json()
    assert data["id"] == workflow.id
    assert data["name"] == workflow.name
    assert data["description"] == workflow.description


def test_update_workflow(db: Session, admin_token_headers: dict, workflow: models.Workflow):
    """测试更新工作流"""
    random_suffix = uuid.uuid4().hex[:8]
    update_data = {
        "name": f"已更新的API工作流_{random_suffix}",
        "description": "通过API更新的工作流描述"
    }
    
    response = client.put(
        f"{settings.API_V1_STR}/workflows/{workflow.id}",
        headers=admin_token_headers,
        json=update_data,
    )
    
    assert response.status_code == 200
    data = response.json()
    assert data["id"] == workflow.id
    assert data["name"] == update_data["name"]
    assert data["description"] == update_data["description"]


def test_delete_workflow(db: Session, admin_token_headers: dict):
    """测试删除工作流"""
    # 创建测试工作流
    random_suffix = uuid.uuid4().hex[:8]
    workflow_data = {
        "name": f"待删除的API工作流_{random_suffix}",
        "description": "将被删除的工作流"
    }
    
    # 使用管理员权限创建工作流
    response = client.post(
        f"{settings.API_V1_STR}/workflows/",
        headers=admin_token_headers,
        json=workflow_data,
    )
    
    assert response.status_code == 200 or response.status_code == 201
    workflow_id = response.json()["id"]
    
    # 删除工作流
    response = client.delete(
    # 验证工作流已被删除
    response = client.get(
        f"{settings.API_V1_STR}/workflows/{workflow_id}",
        headers=admin_token_headers,
    )
    assert response.status_code == 404  # 工作流应该不存在了


def test_get_workflow_nodes(db: Session, admin_token_headers: dict, workflow: models.Workflow):
    """测试获取工作流节点"""
    # 需要添加节点测试 - 先创建节点
    node_data = {
        "name": "测试节点",
        "description": "用于测试的节点",
        "node_type": "approval",
        "order_index": 1
    }
    
    response = client.post(
        f"{settings.API_V1_STR}/workflows/{workflow.id}/nodes",
        headers=admin_token_headers,
        json=node_data,
    )
    
    # 获取节点
    response = client.get(
        f"{settings.API_V1_STR}/workflows/{workflow.id}/nodes",
        headers=admin_token_headers,
    )
    
    assert response.status_code == 200
    data = response.json()
    assert isinstance(data, list)
    if len(data) > 0:
        assert all(node["workflow_id"] == workflow.id for node in data)
